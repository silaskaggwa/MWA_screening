{"version":3,"sources":["webpack:///./src/app/admin/admin.component.css","webpack:///./src/app/admin/admin.component.html","webpack:///./src/app/admin/admin.component.ts","webpack:///./src/app/admin/admin.guard.ts","webpack:///./src/app/admin/admin.module.ts","webpack:///./src/app/admin/question.service.ts","webpack:///./src/app/admin/questions.component.html","webpack:///./src/app/admin/questions.component.ts","webpack:///./src/app/admin/user.service.ts","webpack:///./src/app/material.module.ts"],"names":[],"mappings":"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","file":"admin-admin-module.js","sourcesContent":["module.exports = \"\\n\\n  table {\\n    width: 70%;\\n  }\\n  label{color:green}\"","module.exports = \"<!-- <mat-toolbar>\\n    <span>Register User</span>\\n</mat-toolbar> -->\\n<mat-toolbar color=\\\"primary\\\">\\n    <mat-toolbar-row>\\n       <a mat-button routerLink=\\\"#\\\">HOME</a>\\n       <a mat-button routerLink=\\\"/admin\\\">Register User</a>\\n       <span class=\\\"spacer\\\"></span>\\n       <a mat-button routerLink=\\\"/admin/questions\\\">Question</a>\\n    </mat-toolbar-row>\\n  </mat-toolbar>\\n      \\n<mat-card class=\\\"my-card\\\">\\n    <mat-card-content>\\n        <form (ngSubmit)=\\\"createUser(f)\\\" #f=\\\"ngForm\\\" class=\\\"my-form\\\">\\n            <mat-form-field class=\\\"full-width\\\">\\n                <mat-label>Name</mat-label>\\n                <input ngModel name=\\\"fname\\\" #fname=\\\"ngModel\\\" matInput placeholder=\\\"First name\\\" required>\\n            </mat-form-field>\\n            <mat-form-field class=\\\"full-width\\\">\\n                <mat-label>Email</mat-label>\\n                <input ngModel name=\\\"email\\\" #fname=\\\"ngModel\\\" matInput placeholder=\\\"Email\\\" required>\\n            </mat-form-field>\\n            <mat-form-field class=\\\"full-width\\\">\\n                <mat-label>Role</mat-label>\\n                <input ngModel name=\\\"role\\\" #role=\\\"ngModel\\\" matInput placeholder=\\\"role\\\" required>\\n            </mat-form-field>\\n\\n            <mat-card-actions>\\n                <button mat-raised-button color=\\\"primary\\\">SAVE</button>\\n                <button mat-icon-button >\\n                    <mat-icon aria-label=\\\"Example icon-button with a heart icon\\\">favorite</mat-icon>\\n                </button>\\n                <label>{{msg}}</label>\\n            </mat-card-actions>\\n        </form>\\n\\n        <table mat-table [dataSource]=\\\"dataSource\\\" class=\\\"mat-elevation-z8\\\">\\n\\n            <!-- Name Column -->\\n            <ng-container matColumnDef=\\\"name\\\">\\n                <th mat-header-cell *matHeaderCellDef> Name </th>\\n                <td mat-cell *matCellDef=\\\"let element\\\"> {{element.name}} </td>\\n            </ng-container>\\n\\n            <!-- Email Column -->\\n            <ng-container matColumnDef=\\\"email\\\">\\n                <th mat-header-cell *matHeaderCellDef> Email </th>\\n                <td mat-cell *matCellDef=\\\"let element\\\"> {{element.email}} </td>\\n            </ng-container>\\n\\n            <!-- Status Column -->\\n            <ng-container matColumnDef=\\\"role\\\">\\n                <th mat-header-cell *matHeaderCellDef> Role </th>\\n                <td mat-cell *matCellDef=\\\"let element\\\"> {{element.role}} </td>\\n            </ng-container>\\n\\n            <!-- Deactivate Column -->\\n            <ng-container matColumnDef=\\\"status\\\">\\n                <th mat-header-cell *matHeaderCellDef> Status </th>\\n                <td mat-cell *matCellDef=\\\"let element\\\">\\n                    <mat-slide-toggle></mat-slide-toggle>\\n                </td>\\n            </ng-container>\\n\\n            <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n            <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\n        </table>\\n    </mat-card-content>\\n</mat-card>\"","import { Component, OnInit } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { UserService } from './user.service'\nimport { MatDialog, MAT_DIALOG_DATA } from '@angular/material';\n\ninterface User {\n  _id: string,\n  name: string,\n  email: string,\n  role: string,\n  active: boolean\n}\nexport interface PeriodicElement {\n  name: string;\n  email: string;\n  role: string;\n  active: boolean;\n}\n\nconst ELEMENT_DATA: User[] = [\n  { _id: '1', name: 'Tigist', email: \"tigist@gmail.com\", role: 'Admin', active: true },\n  { _id: '1', name: 'Silas', email: \"tigist@gmail.com\", role: 'Admin-Staff', active: true },\n  { _id: '1', name: 'Alem', email: \"tigist@gmail.com\", role: 'Admin', active: true },\n  { _id: '1', name: 'Tigist', email: \"tigist@gmail.com\", role: 'Admin', active: false },\n  { _id: '1', name: 'Alem', email: \"tigist@gmail.com\", role: 'Admin', active: false }\n];\n@Component({\n  selector: 'admin',\n  templateUrl: './admin.component.html',\n  styleUrls: ['./admin.component.css']\n})\nexport class AdminComponent implements OnInit {\n\n  constructor(private userService: UserService, public dialog: MatDialog) {\n\n  }\n\n  ngOnInit() {\n    this.getUser()\n  }\n  arr: any[] = [];\n  msg: string;\n  dataSource: User[];\n  openDialog() {\n\n    console.log('tg dialog');\n    // this.dialog.open(AddUserComponent);\n\n  }\n  createUser(form: NgForm) {\n    this.arr = form.value;\n    this.userService.createUser(this.arr)\n      .subscribe(resp => { console.log('resp>>', resp) })\n    this.msg = \"user is saved!\";\n  }\n  getUser() {\n    //console.log('users', this.userService.getUser());\n\n    this.userService.getUser()\n      .subscribe((data:User[]) => {\n        console.log('users data', data);\n        this.dataSource =data;\n      }, err => { console.log('err', err.message) });\n\n  }\n\n  displayedColumns: string[] = ['name', 'email', 'role', 'status'];\n // dataSource = ELEMENT_DATA;\n\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AdminGuard implements CanActivate {\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean {\n    return true;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { AdminComponent } from './admin.component';\n\nimport { AdminGuard } from './admin.guard';\nimport { RouterModule } from '@angular/router';\nimport { MyMaterialModule } from  '../material.module';\nimport { QuestionsComponent } from './questions.component';\n\n\nexport const ADMIN_ROUTES = [\n  {path:'', component: AdminComponent, canActivate: [ AdminGuard ]},\n  {path:'questions', component: QuestionsComponent, canActivate: [ AdminGuard ]}\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MyMaterialModule,\n   \n    RouterModule.forChild(ADMIN_ROUTES)\n    \n  ],\n // entryComponents: [AddUserComponent],\n  declarations: [AdminComponent,QuestionsComponent],\n  bootstrap: [AdminComponent]\n})\nexport class AdminModule { }\n\n\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\n\n\nexport class QuestionService {\n\n  domain: string = 'http://localhost:3000';\n  constructor(private http:HttpClient) { }\n\n  addQuestion(data){\n\n      console.log('Question service has data-> :'+JSON.stringify(data));\n      return this.http.post(this.domain+'/admin/questions/create',data);//, { withCredentials: true });\n  }\n\n  getQuestions()\n  {\n    console.log('hi get question service');\n   // return this.http.get(this.domain+'/admin/user/details');//, { withCredentials: true });\n  }\n \n}","module.exports = \"<mat-toolbar>\\n    <span>Add Question</span>\\n</mat-toolbar>\\n\\n<mat-card class=\\\"my-card\\\">\\n    <mat-card-content>\\n        <form (ngSubmit)=\\\"addQuestion(f)\\\" #f=\\\"ngForm\\\" class=\\\"my-form\\\">\\n            <mat-form-field class=\\\"full-width\\\">\\n                <mat-label>Question</mat-label>\\n                <input ngModel name=\\\"question\\\" #question=\\\"ngModel\\\" matInput placeholder=\\\"Question\\\" required>\\n            </mat-form-field>\\n            <mat-form-field class=\\\"full-width\\\">\\n                <mat-label>Status</mat-label>\\n\\n                <input ngModel name=\\\"active\\\" #active=\\\"ngModel\\\" matInput placeholder=\\\"Email\\\" required>\\n                <!-- <mat-slide-toggle value='true'></mat-slide-toggle>-->\\n            </mat-form-field>\\n            <mat-card-actions>\\n                <button mat-raised-button color=\\\"primary\\\">SAVE</button>\\n                <label>{{msg}}</label>\\n            </mat-card-actions>\\n        </form>\\n\\n        <table mat-table [dataSource]=\\\"dataSource\\\" class=\\\"mat-elevation-z8\\\">\\n\\n            <!-- Name Column -->\\n            <ng-container matColumnDef=\\\"question\\\">\\n                <th mat-header-cell *matHeaderCellDef> Question </th>\\n                <td mat-cell *matCellDef=\\\"let element\\\"> {{element.question}} </td>\\n            </ng-container>\\n            <!-- active Column -->\\n            <ng-container matColumnDef=\\\"active\\\">\\n                <th mat-header-cell *matHeaderCellDef> Status </th>\\n                <td mat-cell *matCellDef=\\\"let element\\\">\\n                    <mat-slide-toggle></mat-slide-toggle>\\n                </td>\\n            </ng-container>\\n            <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n            <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\n\\n        </table>\\n    </mat-card-content>\\n</mat-card>\"","import { Component, OnInit } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { QuestionService } from './question.service';\nexport interface PeriodicElement {\n  question: string;\n  active: boolean;\n}\n\nconst ELEMENT_DATA: PeriodicElement[] = [\n  { question: 'what is last name of Tigist?', active: true },\n  { question: 'what is last name of Silas?', active: true },\n  { question: 'what is last name of Alem?', active: true },\n\n];\n@Component({\n  selector: 'app-question',\n  templateUrl: './questions.component.html',\n  styles: [`table {width: 70%;} label{color:green}`]\n})\nexport class QuestionsComponent implements OnInit {\n  arr: any[] = [];\n  msg: string;\n  constructor(private questionService: QuestionService) { }\n\n  ngOnInit() {\n  }\n  addQuestion(form: NgForm) {\n    this.arr = form.value\n    console.log('value', JSON.stringify(form.value));\n    this.questionService.addQuestion(this.arr).subscribe(\n      resp => console.log('resp>>', resp)\n    )\n    this.msg = '  Question is saved!';\n  }\n\n  displayedColumns: string[] = ['question', 'active'];\n  dataSource = ELEMENT_DATA;\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\n\n\nexport class UserService {\n\n  domain: string = 'http://localhost:3000';\n  constructor(private http:HttpClient) { }\n\n  createUser(data){\n\n      console.log('service has data-> :'+JSON.stringify(data));\n      return this.http.post(this.domain+'/admin/user/create',data);//, { withCredentials: true });\n  }\n\n  getUser()\n  {\n    \n    return this.http.get(this.domain+'/admin/user');//, { withCredentials: true });\n  }\n \n}","import { NgModule } from  '@angular/core';\nimport {MatNativeDateModule,MatIconModule,\n    MatButtonModule,MatCheckboxModule, MatToolbarModule, \n    MatCardModule,MatFormFieldModule,MatDialogModule,MatSlideToggleModule, MatInputModule,MatRadioModule,MatListModule,MatGridListModule,MatTableModule} \n    from  '@angular/material';\nimport {MatDatepickerModule} from  '@angular/material/datepicker';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n \n@NgModule({\nimports: [MatNativeDateModule,MatDatepickerModule,MatIconModule,MatButtonModule,MatCheckboxModule, MatToolbarModule,FormsModule, MatCardModule,MatFormFieldModule,MatInputModule,MatListModule,MatRadioModule,],\n \nexports: [MatNativeDateModule,FormsModule,\nMatDatepickerModule,MatGridListModule,MatIconModule,MatDialogModule,MatSlideToggleModule,MatTableModule,MatButtonModule,MatCheckboxModule, MatToolbarModule, MatCardModule,MatFormFieldModule,MatInputModule,MatListModule,MatRadioModule,],\n \n})\n \nexport  class  MyMaterialModule { }"],"sourceRoot":""}